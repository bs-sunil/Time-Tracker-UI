{"version":3,"file":"static/js/377.e699c5aa.chunk.js","mappings":"qLA0GA,EAlGkB,WA8DhB,OACE,+BACE,gBAAKA,UAAU,aAAY,UACzB,sDA+BR,C","sources":["components/dashboard/Dashboard.tsx"],"sourcesContent":["import \"./Dashboard.css\";\r\nimport * as React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport axiosInstance from \"../../config/axios.config\";\r\nimport { environment } from \"../../environments/environment\";\r\nimport { handleError } from \"../utils/CommonFn\";\r\n\r\nconst Dashboard = () => {\r\n  // const [selectedOption, setSelectedOption]: any = React.useState();\r\n  // const [top100Films, setTop100Films]: any = React.useState([]);\r\n\r\n  // React.useEffect(() => {\r\n  //   axiosInstance\r\n  //     .get(`${environment.baseApiURL}auth/v1/test`)\r\n  //     .then((result: any) => {\r\n  //       if (result.data.code === 200) {\r\n  //         setTop100Films(result.data.data);\r\n  //         console.log(result.data.data);\r\n  //         // return result.data.data;\r\n  //       } else if (result.data.code === 206) {\r\n  //         // return result.data.data;\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //       // return err;\r\n  //     });\r\n  // }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   axiosInstance\r\n  //     .get(`${environment.baseApiURL}auth/v1/test1`)\r\n  //     .then((result: any) => {\r\n  //       if (result.data.code === 200) {\r\n  //         setTop100Films(result.data.data);\r\n  //         console.log(result.data.data);\r\n  //         // return result.data.data;\r\n  //       } else if (result.data.code === 206) {\r\n  //         // return result.data.data;\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       handleError(err);\r\n  //       console.log(err);\r\n  //       // return err;\r\n  //     });\r\n  // }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   const id = \"3FCC371E-F1F4-43BC-86B5-006BE4AD0541\";\r\n  //   const c = top100Films.find((val: any) => {\r\n  //     return val.SessionGuID == id;\r\n  //   });\r\n  //   setSelectedOption(c);\r\n  // }, [top100Films]);\r\n  // console.log(selectedOption);\r\n\r\n  // const handVal = (val: any) => {\r\n  //   console.log(val);\r\n  // };\r\n\r\n  // const handleDefault = () => {\r\n  //   const id = 3;\r\n  //   const c = top100Films.find((val: any) => {\r\n  //     return val.RoleID == id;\r\n  //   });\r\n  //   return setSelectedOption(c);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"common-top\">\r\n        <h1>This is from Dashboard</h1>\r\n      </div>\r\n      {/* {selectedOption && (\r\n        <Autocomplete\r\n          options={top100Films}\r\n          getOptionLabel={(option: any) => option.EndDate}\r\n          defaultValue={selectedOption}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              variant=\"standard\"\r\n              label=\"Multiple values\"\r\n              placeholder=\"Favorites\"\r\n            />\r\n          )}\r\n          onChange={(event, value) => {\r\n            handVal(value);\r\n          }}\r\n        />\r\n      )} */}\r\n\r\n      {/* {inputValue} */}\r\n      {/* <Select\r\n        defaultValue={selectedOption}\r\n        onChange={handVal}\r\n        options={options}\r\n        // getOptionLabel={options.label}\r\n        // getOptionValue={options.value}\r\n      /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["className"],"sourceRoot":""}