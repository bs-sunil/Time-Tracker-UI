{"version":3,"file":"static/js/701.3af3354d.chunk.js","mappings":"kPAuEA,EA3De,WACb,IAAMA,GAAeC,EAAAA,EAAAA,KACrB,GAAmBC,EAAAA,EAAAA,UACjBC,KAAKC,MAAsB,SAAhBD,KAAKE,SAAsB,KAASC,SAAS,KADnDC,GAEN,YAFc,GAGTC,GAAWC,EAAAA,EAAAA,MA6CjB,OA5CAC,EAAAA,EAAAA,YAAU,WACR,IAEMC,EAAO,CACXC,SAAU,SACVC,SAJmBC,EAAAA,EAAAA,IAA8B,QAKjDC,MAAO,CACLC,WAAY,MACZC,OAAQ,MACRC,aAAc,kBACdC,aAAa,GAAD,OAAKC,EAAAA,EAAAA,aACjBC,MAAM,GAAD,OAAKD,EAAAA,EAAAA,gBACVE,SAAUf,IAGdgB,eAAeC,QAAQ,YAAajB,GACpCkB,EAAAA,EAAAA,KACQ,GAAD,OAAIL,EAAAA,EAAAA,WAAsB,kBAAkBT,GAChDe,MAAK,SAACC,GACL,GAAyB,MAArBA,EAAOhB,KAAKiB,KAAc,CAC5BL,eAAeC,QAAQ,eAAgBG,EAAOhB,KAAKA,KAAKkB,cACxDN,eAAeC,QAAQ,gBAAiBG,EAAOhB,KAAKA,KAAKmB,KACzDP,eAAeC,QACb,gBACAG,EAAOhB,KAAKA,KAAKoB,eAEnB,IAAMC,EAAsBC,KAAKC,MAC/BC,KAAKR,EAAOhB,KAAKA,KAAKkB,aAAaO,MAAM,KAAK,KAGhDb,eAAeC,QAAQ,WAAYQ,EAAeK,UAClDd,eAAeC,QAAQ,QAASQ,EAAeM,OAC/Cf,eAAeC,QAAQ,SAAUQ,EAAeO,KAEhD/B,GAASgC,EAAAA,EAAAA,MACX,MAAgC,MAArBb,EAAOhB,KAAKiB,OACrB5B,EAAa,UAAW2B,EAAOhB,KAAK8B,SACpCjC,EAAS,KAEb,IACCkC,OAAM,SAACC,GACNnC,GAASoC,EAAAA,EAAAA,IAAYD,GACvB,GACJ,GAAG,KAED,iBAAKE,UAAU,SAAQ,WACrB,oBACA,oBACA,oBACA,qBAGN,C,+ECnEa5C,EAAgB,WAC3B,IAAQ6C,GAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAA1BF,WAcR,OAZqB,SACnBG,EAEAC,GAEAJ,EAAW,CACTG,KAAAA,EAEAC,KAAAA,GAEJ,CAGF,C","sources":["components/authentication/runway/runway.tsx","hooks/useToasterAlert.tsx"],"sourcesContent":["import \"./runway.css\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  getQueryStringParameterByName,\r\n  handleError,\r\n  roleWiseUserNavigation,\r\n} from \"../../utils/CommonFn\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSnackAlert } from \"../../../hooks/useToasterAlert\";\r\n\r\nconst Runway = () => {\r\n  const showSnackbar = useSnackAlert();\r\n  const [uniqueId] = useState(\r\n    Math.floor(Math.random() * 0xffffff * 1000000).toString(16)\r\n  );\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    const receivedCode = getQueryStringParameterByName(\"code\");\r\n\r\n    const data = {\r\n      authType: \"mscode\",\r\n      authKey: receivedCode,\r\n      state: {\r\n        agent_type: \"web\",\r\n        caller: \"web\",\r\n        ondemandpage: \"/main/dashboard\",\r\n        redirect_uri: `${environment.redirectUrl}`,\r\n        scope: `${environment.scopeForSignIn}`,\r\n        uniqueid: uniqueId,\r\n      },\r\n    };\r\n    sessionStorage.setItem(\"unique_id\", uniqueId);\r\n    axios\r\n      .post(`${environment.baseApiURL}auth/v1/signin`, data)\r\n      .then((result) => {\r\n        if (result.data.code === 200) {\r\n          sessionStorage.setItem(\"access_token\", result.data.data.access_token);\r\n          sessionStorage.setItem(\"exp_timestamp\", result.data.data.exp);\r\n          sessionStorage.setItem(\r\n            \"refresh_token\",\r\n            result.data.data.refresh_token\r\n          );\r\n          const decodedJwtData: any = JSON.parse(\r\n            atob(result.data.data.access_token.split(\".\")[1])\r\n          );\r\n\r\n          sessionStorage.setItem(\"emp_name\", decodedJwtData.emp_name);\r\n          sessionStorage.setItem(\"roles\", decodedJwtData.roles);\r\n          sessionStorage.setItem(\"UserId\", decodedJwtData.sub);\r\n\r\n          navigate(roleWiseUserNavigation());\r\n        } else if (result.data.code === 206) {\r\n          showSnackbar(\"warning\", result.data.message);\r\n          navigate(\"/\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        navigate(handleError(error));\r\n      });\r\n  }, []);\r\n  return (\r\n    <div className=\"loader\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\nexport default Runway;\r\n","import { useContext } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nexport const useSnackAlert = () => {\r\n  const { setToaster } = useContext(AppContext);\r\n\r\n  const showSnackbar = (\r\n    type: \"success\" | \"error\" | \"info\" | \"warning\",\r\n\r\n    text: string\r\n  ) => {\r\n    setToaster({\r\n      type,\r\n\r\n      text,\r\n    });\r\n  };\r\n\r\n  return showSnackbar;\r\n};\r\n"],"names":["showSnackbar","useSnackAlert","useState","Math","floor","random","toString","uniqueId","navigate","useNavigate","useEffect","data","authType","authKey","getQueryStringParameterByName","state","agent_type","caller","ondemandpage","redirect_uri","environment","scope","uniqueid","sessionStorage","setItem","axios","then","result","code","access_token","exp","refresh_token","decodedJwtData","JSON","parse","atob","split","emp_name","roles","sub","roleWiseUserNavigation","message","catch","error","handleError","className","setToaster","useContext","AppContext","type","text"],"sourceRoot":""}